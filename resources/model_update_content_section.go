/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateContentSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateContentSection{}

// UpdateContentSection struct for UpdateContentSection
type UpdateContentSection struct {
	Type string `json:"type"`
	Section Section `json:"section"`
}

type _UpdateContentSection UpdateContentSection

// NewUpdateContentSection instantiates a new UpdateContentSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateContentSection(type_ string, section Section) *UpdateContentSection {
	this := UpdateContentSection{}
	this.Type = type_
	this.Section = section
	return &this
}

// NewUpdateContentSectionWithDefaults instantiates a new UpdateContentSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateContentSectionWithDefaults() *UpdateContentSection {
	this := UpdateContentSection{}
	return &this
}

// GetType returns the Type field value
func (o *UpdateContentSection) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateContentSection) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateContentSection) SetType(v string) {
	o.Type = v
}

// GetSection returns the Section field value
func (o *UpdateContentSection) GetSection() Section {
	if o == nil {
		var ret Section
		return ret
	}

	return o.Section
}

// GetSectionOk returns a tuple with the Section field value
// and a boolean to check if the value has been set.
func (o *UpdateContentSection) GetSectionOk() (*Section, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Section, true
}

// SetSection sets field value
func (o *UpdateContentSection) SetSection(v Section) {
	o.Section = v
}

func (o UpdateContentSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateContentSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["section"] = o.Section
	return toSerialize, nil
}

func (o *UpdateContentSection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"section",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateContentSection := _UpdateContentSection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateContentSection)

	if err != nil {
		return err
	}

	*o = UpdateContentSection(varUpdateContentSection)

	return err
}

type NullableUpdateContentSection struct {
	value *UpdateContentSection
	isSet bool
}

func (v NullableUpdateContentSection) Get() *UpdateContentSection {
	return v.value
}

func (v *NullableUpdateContentSection) Set(val *UpdateContentSection) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateContentSection) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateContentSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateContentSection(val *UpdateContentSection) *NullableUpdateContentSection {
	return &NullableUpdateContentSection{value: val, isSet: true}
}

func (v NullableUpdateContentSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateContentSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


