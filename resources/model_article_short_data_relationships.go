/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArticleShortDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleShortDataRelationships{}

// ArticleShortDataRelationships struct for ArticleShortDataRelationships
type ArticleShortDataRelationships struct {
	Authors []Relationships `json:"authors"`
	Tags []Relationships `json:"tags"`
}

type _ArticleShortDataRelationships ArticleShortDataRelationships

// NewArticleShortDataRelationships instantiates a new ArticleShortDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleShortDataRelationships(authors []Relationships, tags []Relationships) *ArticleShortDataRelationships {
	this := ArticleShortDataRelationships{}
	this.Authors = authors
	this.Tags = tags
	return &this
}

// NewArticleShortDataRelationshipsWithDefaults instantiates a new ArticleShortDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleShortDataRelationshipsWithDefaults() *ArticleShortDataRelationships {
	this := ArticleShortDataRelationships{}
	return &this
}

// GetAuthors returns the Authors field value
func (o *ArticleShortDataRelationships) GetAuthors() []Relationships {
	if o == nil {
		var ret []Relationships
		return ret
	}

	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataRelationships) GetAuthorsOk() ([]Relationships, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authors, true
}

// SetAuthors sets field value
func (o *ArticleShortDataRelationships) SetAuthors(v []Relationships) {
	o.Authors = v
}

// GetTags returns the Tags field value
func (o *ArticleShortDataRelationships) GetTags() []Relationships {
	if o == nil {
		var ret []Relationships
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataRelationships) GetTagsOk() ([]Relationships, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ArticleShortDataRelationships) SetTags(v []Relationships) {
	o.Tags = v
}

func (o ArticleShortDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleShortDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authors"] = o.Authors
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *ArticleShortDataRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authors",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticleShortDataRelationships := _ArticleShortDataRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArticleShortDataRelationships)

	if err != nil {
		return err
	}

	*o = ArticleShortDataRelationships(varArticleShortDataRelationships)

	return err
}

type NullableArticleShortDataRelationships struct {
	value *ArticleShortDataRelationships
	isSet bool
}

func (v NullableArticleShortDataRelationships) Get() *ArticleShortDataRelationships {
	return v.value
}

func (v *NullableArticleShortDataRelationships) Set(val *ArticleShortDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleShortDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleShortDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleShortDataRelationships(val *ArticleShortDataRelationships) *NullableArticleShortDataRelationships {
	return &NullableArticleShortDataRelationships{value: val, isSet: true}
}

func (v NullableArticleShortDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleShortDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


