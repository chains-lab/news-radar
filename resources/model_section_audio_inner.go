/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SectionAudioInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionAudioInner{}

// SectionAudioInner struct for SectionAudioInner
type SectionAudioInner struct {
	Url string `json:"url"`
	Duration int32 `json:"duration"`
	Caption string `json:"caption"`
	Icon string `json:"icon"`
}

type _SectionAudioInner SectionAudioInner

// NewSectionAudioInner instantiates a new SectionAudioInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionAudioInner(url string, duration int32, caption string, icon string) *SectionAudioInner {
	this := SectionAudioInner{}
	this.Url = url
	this.Duration = duration
	this.Caption = caption
	this.Icon = icon
	return &this
}

// NewSectionAudioInnerWithDefaults instantiates a new SectionAudioInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionAudioInnerWithDefaults() *SectionAudioInner {
	this := SectionAudioInner{}
	return &this
}

// GetUrl returns the Url field value
func (o *SectionAudioInner) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SectionAudioInner) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SectionAudioInner) SetUrl(v string) {
	o.Url = v
}

// GetDuration returns the Duration field value
func (o *SectionAudioInner) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SectionAudioInner) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SectionAudioInner) SetDuration(v int32) {
	o.Duration = v
}

// GetCaption returns the Caption field value
func (o *SectionAudioInner) GetCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value
// and a boolean to check if the value has been set.
func (o *SectionAudioInner) GetCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Caption, true
}

// SetCaption sets field value
func (o *SectionAudioInner) SetCaption(v string) {
	o.Caption = v
}

// GetIcon returns the Icon field value
func (o *SectionAudioInner) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *SectionAudioInner) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *SectionAudioInner) SetIcon(v string) {
	o.Icon = v
}

func (o SectionAudioInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionAudioInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["duration"] = o.Duration
	toSerialize["caption"] = o.Caption
	toSerialize["icon"] = o.Icon
	return toSerialize, nil
}

func (o *SectionAudioInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"duration",
		"caption",
		"icon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSectionAudioInner := _SectionAudioInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSectionAudioInner)

	if err != nil {
		return err
	}

	*o = SectionAudioInner(varSectionAudioInner)

	return err
}

type NullableSectionAudioInner struct {
	value *SectionAudioInner
	isSet bool
}

func (v NullableSectionAudioInner) Get() *SectionAudioInner {
	return v.value
}

func (v *NullableSectionAudioInner) Set(val *SectionAudioInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionAudioInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionAudioInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionAudioInner(val *SectionAudioInner) *NullableSectionAudioInner {
	return &NullableSectionAudioInner{value: val, isSet: true}
}

func (v NullableSectionAudioInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionAudioInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


