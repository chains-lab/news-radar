/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteContentSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteContentSection{}

// DeleteContentSection struct for DeleteContentSection
type DeleteContentSection struct {
	Type string `json:"type"`
	// Unique identifier for the content section to be deleted.
	SectionId int32 `json:"section_id"`
}

type _DeleteContentSection DeleteContentSection

// NewDeleteContentSection instantiates a new DeleteContentSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteContentSection(type_ string, sectionId int32) *DeleteContentSection {
	this := DeleteContentSection{}
	this.Type = type_
	this.SectionId = sectionId
	return &this
}

// NewDeleteContentSectionWithDefaults instantiates a new DeleteContentSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteContentSectionWithDefaults() *DeleteContentSection {
	this := DeleteContentSection{}
	return &this
}

// GetType returns the Type field value
func (o *DeleteContentSection) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeleteContentSection) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeleteContentSection) SetType(v string) {
	o.Type = v
}

// GetSectionId returns the SectionId field value
func (o *DeleteContentSection) GetSectionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value
// and a boolean to check if the value has been set.
func (o *DeleteContentSection) GetSectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionId, true
}

// SetSectionId sets field value
func (o *DeleteContentSection) SetSectionId(v int32) {
	o.SectionId = v
}

func (o DeleteContentSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteContentSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["section_id"] = o.SectionId
	return toSerialize, nil
}

func (o *DeleteContentSection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"section_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteContentSection := _DeleteContentSection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteContentSection)

	if err != nil {
		return err
	}

	*o = DeleteContentSection(varDeleteContentSection)

	return err
}

type NullableDeleteContentSection struct {
	value *DeleteContentSection
	isSet bool
}

func (v NullableDeleteContentSection) Get() *DeleteContentSection {
	return v.value
}

func (v *NullableDeleteContentSection) Set(val *DeleteContentSection) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteContentSection) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteContentSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteContentSection(val *DeleteContentSection) *NullableDeleteContentSection {
	return &NullableDeleteContentSection{value: val, isSet: true}
}

func (v NullableDeleteContentSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteContentSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


