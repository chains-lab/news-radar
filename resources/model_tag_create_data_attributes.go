/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagCreateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagCreateDataAttributes{}

// TagCreateDataAttributes struct for TagCreateDataAttributes
type TagCreateDataAttributes struct {
	// tag name
	Name string `json:"name"`
	// tag status
	Status string `json:"status"`
	// tag type
	Type string `json:"type"`
	// tag description
	Description string `json:"description"`
	// tag color
	Color string `json:"color"`
	// tag icon
	Icon string `json:"icon"`
}

type _TagCreateDataAttributes TagCreateDataAttributes

// NewTagCreateDataAttributes instantiates a new TagCreateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCreateDataAttributes(name string, status string, type_ string, description string, color string, icon string) *TagCreateDataAttributes {
	this := TagCreateDataAttributes{}
	this.Name = name
	this.Status = status
	this.Type = type_
	this.Description = description
	this.Color = color
	this.Icon = icon
	return &this
}

// NewTagCreateDataAttributesWithDefaults instantiates a new TagCreateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCreateDataAttributesWithDefaults() *TagCreateDataAttributes {
	this := TagCreateDataAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *TagCreateDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagCreateDataAttributes) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *TagCreateDataAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TagCreateDataAttributes) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *TagCreateDataAttributes) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TagCreateDataAttributes) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *TagCreateDataAttributes) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TagCreateDataAttributes) SetDescription(v string) {
	o.Description = v
}

// GetColor returns the Color field value
func (o *TagCreateDataAttributes) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *TagCreateDataAttributes) SetColor(v string) {
	o.Color = v
}

// GetIcon returns the Icon field value
func (o *TagCreateDataAttributes) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *TagCreateDataAttributes) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *TagCreateDataAttributes) SetIcon(v string) {
	o.Icon = v
}

func (o TagCreateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagCreateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description
	toSerialize["color"] = o.Color
	toSerialize["icon"] = o.Icon
	return toSerialize, nil
}

func (o *TagCreateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"type",
		"description",
		"color",
		"icon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagCreateDataAttributes := _TagCreateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagCreateDataAttributes)

	if err != nil {
		return err
	}

	*o = TagCreateDataAttributes(varTagCreateDataAttributes)

	return err
}

type NullableTagCreateDataAttributes struct {
	value *TagCreateDataAttributes
	isSet bool
}

func (v NullableTagCreateDataAttributes) Get() *TagCreateDataAttributes {
	return v.value
}

func (v *NullableTagCreateDataAttributes) Set(val *TagCreateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCreateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCreateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCreateDataAttributes(val *TagCreateDataAttributes) *NullableTagCreateDataAttributes {
	return &NullableTagCreateDataAttributes{value: val, isSet: true}
}

func (v NullableTagCreateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCreateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


