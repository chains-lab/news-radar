/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetAuthorshipDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetAuthorshipDataAttributes{}

// SetAuthorshipDataAttributes struct for SetAuthorshipDataAttributes
type SetAuthorshipDataAttributes struct {
	AuthorID []string `json:"authorID,omitempty"`
	// The ID of the article.
	ArticleID string `json:"articleID"`
}

type _SetAuthorshipDataAttributes SetAuthorshipDataAttributes

// NewSetAuthorshipDataAttributes instantiates a new SetAuthorshipDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetAuthorshipDataAttributes(articleID string) *SetAuthorshipDataAttributes {
	this := SetAuthorshipDataAttributes{}
	this.ArticleID = articleID
	return &this
}

// NewSetAuthorshipDataAttributesWithDefaults instantiates a new SetAuthorshipDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetAuthorshipDataAttributesWithDefaults() *SetAuthorshipDataAttributes {
	this := SetAuthorshipDataAttributes{}
	return &this
}

// GetAuthorID returns the AuthorID field value if set, zero value otherwise.
func (o *SetAuthorshipDataAttributes) GetAuthorID() []string {
	if o == nil || IsNil(o.AuthorID) {
		var ret []string
		return ret
	}
	return o.AuthorID
}

// GetAuthorIDOk returns a tuple with the AuthorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetAuthorshipDataAttributes) GetAuthorIDOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorID) {
		return nil, false
	}
	return o.AuthorID, true
}

// HasAuthorID returns a boolean if a field has been set.
func (o *SetAuthorshipDataAttributes) HasAuthorID() bool {
	if o != nil && !IsNil(o.AuthorID) {
		return true
	}

	return false
}

// SetAuthorID gets a reference to the given []string and assigns it to the AuthorID field.
func (o *SetAuthorshipDataAttributes) SetAuthorID(v []string) {
	o.AuthorID = v
}

// GetArticleID returns the ArticleID field value
func (o *SetAuthorshipDataAttributes) GetArticleID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArticleID
}

// GetArticleIDOk returns a tuple with the ArticleID field value
// and a boolean to check if the value has been set.
func (o *SetAuthorshipDataAttributes) GetArticleIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArticleID, true
}

// SetArticleID sets field value
func (o *SetAuthorshipDataAttributes) SetArticleID(v string) {
	o.ArticleID = v
}

func (o SetAuthorshipDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetAuthorshipDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorID) {
		toSerialize["authorID"] = o.AuthorID
	}
	toSerialize["articleID"] = o.ArticleID
	return toSerialize, nil
}

func (o *SetAuthorshipDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"articleID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetAuthorshipDataAttributes := _SetAuthorshipDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetAuthorshipDataAttributes)

	if err != nil {
		return err
	}

	*o = SetAuthorshipDataAttributes(varSetAuthorshipDataAttributes)

	return err
}

type NullableSetAuthorshipDataAttributes struct {
	value *SetAuthorshipDataAttributes
	isSet bool
}

func (v NullableSetAuthorshipDataAttributes) Get() *SetAuthorshipDataAttributes {
	return v.value
}

func (v *NullableSetAuthorshipDataAttributes) Set(val *SetAuthorshipDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSetAuthorshipDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSetAuthorshipDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetAuthorshipDataAttributes(val *SetAuthorshipDataAttributes) *NullableSetAuthorshipDataAttributes {
	return &NullableSetAuthorshipDataAttributes{value: val, isSet: true}
}

func (v NullableSetAuthorshipDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetAuthorshipDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


