/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentUpdateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentUpdateDataAttributes{}

// ContentUpdateDataAttributes struct for ContentUpdateDataAttributes
type ContentUpdateDataAttributes struct {
	// The ID of the section to be updated.
	SectionID int32 `json:"sectionID"`
	// The action to be performed on the content.
	Action string `json:"action"`
	Content Content `json:"content"`
}

type _ContentUpdateDataAttributes ContentUpdateDataAttributes

// NewContentUpdateDataAttributes instantiates a new ContentUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentUpdateDataAttributes(sectionID int32, action string, content Content) *ContentUpdateDataAttributes {
	this := ContentUpdateDataAttributes{}
	this.SectionID = sectionID
	this.Action = action
	this.Content = content
	return &this
}

// NewContentUpdateDataAttributesWithDefaults instantiates a new ContentUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentUpdateDataAttributesWithDefaults() *ContentUpdateDataAttributes {
	this := ContentUpdateDataAttributes{}
	return &this
}

// GetSectionID returns the SectionID field value
func (o *ContentUpdateDataAttributes) GetSectionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SectionID
}

// GetSectionIDOk returns a tuple with the SectionID field value
// and a boolean to check if the value has been set.
func (o *ContentUpdateDataAttributes) GetSectionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionID, true
}

// SetSectionID sets field value
func (o *ContentUpdateDataAttributes) SetSectionID(v int32) {
	o.SectionID = v
}

// GetAction returns the Action field value
func (o *ContentUpdateDataAttributes) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ContentUpdateDataAttributes) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ContentUpdateDataAttributes) SetAction(v string) {
	o.Action = v
}

// GetContent returns the Content field value
func (o *ContentUpdateDataAttributes) GetContent() Content {
	if o == nil {
		var ret Content
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ContentUpdateDataAttributes) GetContentOk() (*Content, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ContentUpdateDataAttributes) SetContent(v Content) {
	o.Content = v
}

func (o ContentUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentUpdateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sectionID"] = o.SectionID
	toSerialize["action"] = o.Action
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *ContentUpdateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sectionID",
		"action",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentUpdateDataAttributes := _ContentUpdateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentUpdateDataAttributes)

	if err != nil {
		return err
	}

	*o = ContentUpdateDataAttributes(varContentUpdateDataAttributes)

	return err
}

type NullableContentUpdateDataAttributes struct {
	value *ContentUpdateDataAttributes
	isSet bool
}

func (v NullableContentUpdateDataAttributes) Get() *ContentUpdateDataAttributes {
	return v.value
}

func (v *NullableContentUpdateDataAttributes) Set(val *ContentUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableContentUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableContentUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentUpdateDataAttributes(val *ContentUpdateDataAttributes) *NullableContentUpdateDataAttributes {
	return &NullableContentUpdateDataAttributes{value: val, isSet: true}
}

func (v NullableContentUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


