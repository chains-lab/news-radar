/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TagAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagAttributes{}

// TagAttributes struct for TagAttributes
type TagAttributes struct {
	Status string `json:"status"`
	Type string `json:"type"`
	// Tag color
	Color string `json:"color"`
	// Tag icon
	Icon string `json:"icon"`
	CreatedAt time.Time `json:"created_at"`
}

type _TagAttributes TagAttributes

// NewTagAttributes instantiates a new TagAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagAttributes(status string, type_ string, color string, icon string, createdAt time.Time) *TagAttributes {
	this := TagAttributes{}
	this.Status = status
	this.Type = type_
	this.Color = color
	this.Icon = icon
	this.CreatedAt = createdAt
	return &this
}

// NewTagAttributesWithDefaults instantiates a new TagAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagAttributesWithDefaults() *TagAttributes {
	this := TagAttributes{}
	return &this
}

// GetStatus returns the Status field value
func (o *TagAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TagAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TagAttributes) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *TagAttributes) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TagAttributes) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TagAttributes) SetType(v string) {
	o.Type = v
}

// GetColor returns the Color field value
func (o *TagAttributes) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *TagAttributes) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *TagAttributes) SetColor(v string) {
	o.Color = v
}

// GetIcon returns the Icon field value
func (o *TagAttributes) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *TagAttributes) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *TagAttributes) SetIcon(v string) {
	o.Icon = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TagAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TagAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TagAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o TagAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	toSerialize["color"] = o.Color
	toSerialize["icon"] = o.Icon
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *TagAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"type",
		"color",
		"icon",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagAttributes := _TagAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagAttributes)

	if err != nil {
		return err
	}

	*o = TagAttributes(varTagAttributes)

	return err
}

type NullableTagAttributes struct {
	value *TagAttributes
	isSet bool
}

func (v NullableTagAttributes) Get() *TagAttributes {
	return v.value
}

func (v *NullableTagAttributes) Set(val *TagAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTagAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTagAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagAttributes(val *TagAttributes) *NullableTagAttributes {
	return &NullableTagAttributes{value: val, isSet: true}
}

func (v NullableTagAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


