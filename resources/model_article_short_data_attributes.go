/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ArticleShortDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleShortDataAttributes{}

// ArticleShortDataAttributes struct for ArticleShortDataAttributes
type ArticleShortDataAttributes struct {
	// Article title
	Title string `json:"title"`
	// Article link
	Icon string `json:"icon"`
	// Article description
	Desc string `json:"desc"`
	// Created at
	CreatedAt time.Time `json:"created_at"`
}

type _ArticleShortDataAttributes ArticleShortDataAttributes

// NewArticleShortDataAttributes instantiates a new ArticleShortDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleShortDataAttributes(title string, icon string, desc string, createdAt time.Time) *ArticleShortDataAttributes {
	this := ArticleShortDataAttributes{}
	this.Title = title
	this.Icon = icon
	this.Desc = desc
	this.CreatedAt = createdAt
	return &this
}

// NewArticleShortDataAttributesWithDefaults instantiates a new ArticleShortDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleShortDataAttributesWithDefaults() *ArticleShortDataAttributes {
	this := ArticleShortDataAttributes{}
	return &this
}

// GetTitle returns the Title field value
func (o *ArticleShortDataAttributes) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataAttributes) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ArticleShortDataAttributes) SetTitle(v string) {
	o.Title = v
}

// GetIcon returns the Icon field value
func (o *ArticleShortDataAttributes) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataAttributes) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ArticleShortDataAttributes) SetIcon(v string) {
	o.Icon = v
}

// GetDesc returns the Desc field value
func (o *ArticleShortDataAttributes) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataAttributes) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *ArticleShortDataAttributes) SetDesc(v string) {
	o.Desc = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ArticleShortDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ArticleShortDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ArticleShortDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o ArticleShortDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleShortDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["icon"] = o.Icon
	toSerialize["desc"] = o.Desc
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *ArticleShortDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"icon",
		"desc",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticleShortDataAttributes := _ArticleShortDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArticleShortDataAttributes)

	if err != nil {
		return err
	}

	*o = ArticleShortDataAttributes(varArticleShortDataAttributes)

	return err
}

type NullableArticleShortDataAttributes struct {
	value *ArticleShortDataAttributes
	isSet bool
}

func (v NullableArticleShortDataAttributes) Get() *ArticleShortDataAttributes {
	return v.value
}

func (v *NullableArticleShortDataAttributes) Set(val *ArticleShortDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleShortDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleShortDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleShortDataAttributes(val *ArticleShortDataAttributes) *NullableArticleShortDataAttributes {
	return &NullableArticleShortDataAttributes{value: val, isSet: true}
}

func (v NullableArticleShortDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleShortDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


