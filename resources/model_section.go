/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Section type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Section{}

// Section struct for Section
type Section struct {
	// Unique identifier for the content in this content block. (Num in section)
	Id int32 `json:"id"`
	// The type of content in this section.
	Type string `json:"type"`
	Text []SectionTextInner `json:"text,omitempty"`
	Media []SectionMediaInner `json:"media,omitempty"`
	Audio []SectionAudioInner `json:"audio,omitempty"`
}

type _Section Section

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection(id int32, type_ string) *Section {
	this := Section{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetId returns the Id field value
func (o *Section) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Section) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Section) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Section) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Section) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Section) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Section) GetText() []SectionTextInner {
	if o == nil || IsNil(o.Text) {
		var ret []SectionTextInner
		return ret
	}
	return o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetTextOk() ([]SectionTextInner, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Section) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given []SectionTextInner and assigns it to the Text field.
func (o *Section) SetText(v []SectionTextInner) {
	o.Text = v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *Section) GetMedia() []SectionMediaInner {
	if o == nil || IsNil(o.Media) {
		var ret []SectionMediaInner
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetMediaOk() ([]SectionMediaInner, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *Section) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []SectionMediaInner and assigns it to the Media field.
func (o *Section) SetMedia(v []SectionMediaInner) {
	o.Media = v
}

// GetAudio returns the Audio field value if set, zero value otherwise.
func (o *Section) GetAudio() []SectionAudioInner {
	if o == nil || IsNil(o.Audio) {
		var ret []SectionAudioInner
		return ret
	}
	return o.Audio
}

// GetAudioOk returns a tuple with the Audio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetAudioOk() ([]SectionAudioInner, bool) {
	if o == nil || IsNil(o.Audio) {
		return nil, false
	}
	return o.Audio, true
}

// HasAudio returns a boolean if a field has been set.
func (o *Section) HasAudio() bool {
	if o != nil && !IsNil(o.Audio) {
		return true
	}

	return false
}

// SetAudio gets a reference to the given []SectionAudioInner and assigns it to the Audio field.
func (o *Section) SetAudio(v []SectionAudioInner) {
	o.Audio = v
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Section) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Audio) {
		toSerialize["audio"] = o.Audio
	}
	return toSerialize, nil
}

func (o *Section) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSection := _Section{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSection)

	if err != nil {
		return err
	}

	*o = Section(varSection)

	return err
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


