/*
REST API

REST API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentMedia type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentMedia{}

// ContentMedia struct for ContentMedia
type ContentMedia struct {
	Url string `json:"url"`
	Caption string `json:"caption"`
	Alt string `json:"alt"`
	Width int32 `json:"width"`
	Height int32 `json:"height"`
	Source string `json:"source"`
}

type _ContentMedia ContentMedia

// NewContentMedia instantiates a new ContentMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentMedia(url string, caption string, alt string, width int32, height int32, source string) *ContentMedia {
	this := ContentMedia{}
	this.Url = url
	this.Caption = caption
	this.Alt = alt
	this.Width = width
	this.Height = height
	this.Source = source
	return &this
}

// NewContentMediaWithDefaults instantiates a new ContentMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentMediaWithDefaults() *ContentMedia {
	this := ContentMedia{}
	return &this
}

// GetUrl returns the Url field value
func (o *ContentMedia) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ContentMedia) SetUrl(v string) {
	o.Url = v
}

// GetCaption returns the Caption field value
func (o *ContentMedia) GetCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Caption, true
}

// SetCaption sets field value
func (o *ContentMedia) SetCaption(v string) {
	o.Caption = v
}

// GetAlt returns the Alt field value
func (o *ContentMedia) GetAlt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alt
}

// GetAltOk returns a tuple with the Alt field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetAltOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alt, true
}

// SetAlt sets field value
func (o *ContentMedia) SetAlt(v string) {
	o.Alt = v
}

// GetWidth returns the Width field value
func (o *ContentMedia) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *ContentMedia) SetWidth(v int32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *ContentMedia) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ContentMedia) SetHeight(v int32) {
	o.Height = v
}

// GetSource returns the Source field value
func (o *ContentMedia) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ContentMedia) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ContentMedia) SetSource(v string) {
	o.Source = v
}

func (o ContentMedia) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentMedia) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["caption"] = o.Caption
	toSerialize["alt"] = o.Alt
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *ContentMedia) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"caption",
		"alt",
		"width",
		"height",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentMedia := _ContentMedia{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentMedia)

	if err != nil {
		return err
	}

	*o = ContentMedia(varContentMedia)

	return err
}

type NullableContentMedia struct {
	value *ContentMedia
	isSet bool
}

func (v NullableContentMedia) Get() *ContentMedia {
	return v.value
}

func (v *NullableContentMedia) Set(val *ContentMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableContentMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableContentMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentMedia(val *ContentMedia) *NullableContentMedia {
	return &NullableContentMedia{value: val, isSet: true}
}

func (v NullableContentMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


